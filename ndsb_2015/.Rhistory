kern
im(dilate(img2, kern))
kern = makeBrush(5, shape='diamond')
kern
kern = makeBrush(3, shape='diamond')
kern
im(dilate(img2, kern))
kern = makeBrush(1, shape='diamond')
im(dilate(img2, kern))
kern
img(img2)
im(img2)
kern = makeBrush(3, shape='diamond')
im(dilate(img2, kern))
dilate(img2)
im(dilate(img2))
kern = makeBrush(1, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
im(img22)
kern = makeBrush(3, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
im(img22)
kern = makeBrush(5, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
im(img22)
img2LBL <- bwlabel(img22)
im(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
kern = makeBrush(4, shape='diamond')
kern = makeBrush(3, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
im(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
image(img3LBL)
image(img2LBL)
img2 <- img > mean(img)
kern = makeBrush(3, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
bwlabel(img22)
img22
img2 <- thresh(img, offset=0.01)
img2
img2 <- img > mean(img)
img2 <- thresh(img, offset=0.01)
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- img > mean(img)
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- thresh(img, offset=0.01)
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
str(img)
img2
img2 <- img > mean(img)
img2
img2 <- thresh(img, x=2, y=2, offset=0)
img2 <- thresh(img, w=2, h=2, offset=0)
image(img2)
images(thresh(img, w=2, h=2, offset=0.02))
image(thresh(img, w=2, h=2, offset=0.02))
image(thresh(img, w=2, h=2, offset=0))
image(thresh(img, w=2, h=2, offset=-0.01))
image(thresh(img, w=2, h=2, offset=-0.05))
image(thresh(img, w=2, h=2, offset=-0.09))
image(thresh(img, w=2, h=2, offset=-0.001))
image(thresh(img, w=2, h=2, offset=-0.0001))
image(thresh(img, w=2, h=2, offset=-0.00001))
image(thresh(img, w=2, h=2, offset=0))
image(thresh(img, w=5, h=5, offset=0))
image(thresh(img, w=5, h=5, offset=-0.01))
image(thresh(img, w=3, h=3, offset=-0.01))
image(thresh(img, w=4, h=4, offset=-0.01))
image(thresh(img, w=4, h=4, offset=-0.01))
image(thresh(img, w=1, h=1, offset=-0.01))
image(thresh(img, w=2, h=2, offset=-0.01))
image(thresh(img, w=10, h=10, offset=-0.01))
image(thresh(img, w=20, h=20, offset=-0.01))
image(thresh(img, w=30, h=30, offset=-0.01))
image(thresh(img, w=30, h=30, offset=-0.001))
image(thresh(img, w=30, h=30, offset=-0.0001))
image(thresh(img, w=30, h=30, offset=-0.00001))
img2 <- thresh(img, w=30, h=30, offset=-0.0001)
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2
img2 <- thresh(img, w=30, h=30, offset=-0.0001)
kern = makeBrush(3, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- thresh(img, w=30, h=30, offset=0.0001)
# img2 <- img > mean(img)
kern = makeBrush(3, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- thresh(img, w=30, h=30, offset=0.01)
# img2 <- img > mean(img)
kern = makeBrush(3, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img22
img2 <- img > mean(img)
img2
kern = makeBrush(3, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- thresh(img, w=30, h=30, offset=0.01)
img2
kern = makeBrush(3, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- thresh(img)
# img2 <- img > mean(img)
kern = makeBrush(3, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2LBL
img2 <- thresh(img, w=30, h=30, offset=0.01)
img2
img2 <- thresh(img)
img2
img2 <- thresh(img, w=30, h=30, offset=0.05)
img2
img2 <- thresh(img, w=30, h=30, offset=0.04)
img2
img2 <- thresh(img, w=30, h=30, offset=0.03)
img2
img2 <- thresh(img, w=30, h=30, offset=0.02)
img2
img2 <- thresh(img, w=30, h=30, offset=0.01)
img2
img2 <- thresh(img, w=30, h=30, offset=0.02)
img2 <- thresh(img)
# img2 <- img > mean(img)
kern = makeBrush(3, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- thresh(img, w=30, h=30, offset=0.02)
kern = makeBrush(3, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- thresh(img, w=30, h=30, offset=0.02)
im(img2)
image(thresh(img, w=30, h=30, offset=-0.0001))
image(thresh(img, w=30, h=30, offset=0.02))
image(thresh(img, w=30, h=30, offset=0.01))
image(thresh(img, w=30, h=30, offset=0.05))
image(thresh(img, w=5, h=5, offset=0.05))
thresh(img, w=5, h=5, offset=0.05)
image(thresh(img, w=10, h=10, offset=0.05))
image(thresh(img, w=10, h=10, offset=-0.05))
thresh(img, w=10, h=10, offset=-0.05)
image(thresh(img, w=10, h=10, offset=-0.01))
thresh(img, w=10, h=10, offset=-0.01)
img2 <- img > mean(img)
img2
ifelse(img2 = TRUE, 1, 0)
ifelse(img2 == TRUE, 1, 0)
img2 <- img > mean(img)
img2 <- ifelse(img2 == TRUE, 0, 1)
img2
im(img2)
kern = makeBrush(3, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- img > mean(img)
img2 <- ifelse(img2 == TRUE, 0, 1)
im(img2)
im(erode(img2))
im(erode(img2, kern))
kern = makeBrush(5, shape='diamond')
im(erode(img2, kern))
kern = makeBrush(1, shape='diamond')
im(erode(img2, kern))
kern = makeBrush(1, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
kern = makeBrush(1, shape='diamond')
im(erode(img2, kern))
im(dilate(erode(img2, kern)))
im(dilate(erode(img2, kern)), kern)
im(dilate(erode(img2, kern), kern))
kern = makeBrush(1, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
im(img22)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- img > mean(img)
img2 <- ifelse(img2 == TRUE, 0, 1)
img2 <- img > mean(img)
img2 <- ifelse(img2 == TRUE, 0, 1)
kern = makeBrush(3, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- img > mean(img)
img2 <- ifelse(img2 == TRUE, 0, 1)
kern = makeBrush(5, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- img > mean(img)
img2 <- ifelse(img2 == TRUE, 0, 1)
kern = makeBrush(10, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- img > mean(img)
img2 <- ifelse(img2 == TRUE, 0, 1)
kern = makeBrush(2, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- img > mean(img)
img2 <- ifelse(img2 == TRUE, 0, 1)
kern = makeBrush(1, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- img > mean(img)
img2 <- ifelse(img2 == TRUE, 0, 1)
kern = makeBrush(3, shape='disc')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- img > mean(img)
img2 <- ifelse(img2 == TRUE, 0, 1)
kern = makeBrush(5, shape='disc')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- img > mean(img)
img2 <- ifelse(img2 == TRUE, 0, 1)
kern = makeBrush(1, shape='disc')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- img > mean(img)
img2 <- ifelse(img2 == TRUE, 0, 1)
kern = makeBrush(3, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
dilate(img2)
im(dilate(img2))
im(bwlabel(dilate(img2)))
im(bwlabel(dilate(img2, kern)))
kern = makeBrush(5, shape='diamond')
im(bwlabel(dilate(img2, kern)))
kern = makeBrush(1, shape='diamond')
im(bwlabel(dilate(img2, kern)))
kern = makeBrush(3, shape='diamond')
im(bwlabel(dilate(img2, kern)))
img2 <- img > mean(img)
img2 <- ifelse(img2 == TRUE, 0, 1)
kern = makeBrush(3, shape='diamond')
#img22 <- dilate(erode(img2, kern), kern)
img22 <- dilate(img2, kern)
img2LBL <- bwlabel(img22)
image(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
im(img2LBL)
img2 <- img > mean(img)
img2 <- ifelse(img2 == TRUE, 0, 1)
kern = makeBrush(3, shape='diamond')
img22 <- dilate(erode(img2, kern), kern)
# img22 <- dilate(img2, kern)
img2LBL <- bwlabel(img22)
im(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2 <- img > mean(img)
img2 <- ifelse(img2 == TRUE, 0, 1)
kern = makeBrush(3, shape='diamond')
# img22 <- dilate(erode(img2, kern), kern)
img22 <- dilate(img2, kern)
img2LBL <- bwlabel(img22)
im(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img2LBL
i=1
im(img2LBL == i)
for(i in 1:max(img2LBL)){
im(img2LBL == i)
}
img3 <- img2LBL == 1
im(img3)
extract_stats(img3)
extract_stats(img)
working_file <- paste("c://data/plankton/train/acantharia_protist/2441.jpg",sep="") #"101260.jpg"
img <- readImage(working_file)
im(img)
img2 <- img > mean(img)
img2 <- ifelse(img2 == TRUE, 0, 1)
kern = makeBrush(3, shape='diamond')
# img22 <- dilate(erode(img2, kern), kern)
img22 <- dilate(img2, kern)
img2LBL <- bwlabel(img22)
im(img2LBL)
cat('Number of parts=', max(img2LBL),'\n')
img3 <- img2LBL == 1
im(img3)
extract_stats(img3) # processed
extract_stats(img) # original
image <- working_image < mean(working_image)
im_length <- nrow(image)
im_width <- ncol(image)
im_density <- mean(image)
im_ratio <- im_length / im_width
c(length=im_length,width=im_width,density=im_density,ratio=im_ratio)
image <- working_image > mean(working_image)
image <- ifelse(image == TRUE, 0, 1)
kern = makeBrush(3, shape='diamond')
image <- dilate(image, kern)
image <- bwlabel(image)
im_length <- nrow(image)
im_width <- ncol(image)
im_density <- mean(image)
im_ratio <- im_length / im_width
c(length=im_length,width=im_width,density=im_density,ratio=im_ratio)
extract_stats <- function(working_image = working_image){
#Invert the image to calculate density
#   image <- working_image < mean(working_image) # original code
### MY TESTING CODE ##
image <- working_image > mean(working_image)
image <- ifelse(image == TRUE, 0, 1)
kern = makeBrush(3, shape='diamond')
image <- dilate(image, kern)
image <- bwlabel(image)
## MY CODE ABOVE ##
im_length <- nrow(image)
im_width <- ncol(image)
im_density <- mean(image)
im_ratio <- im_length / im_width
return(c(length=im_length,width=im_width,density=im_density,ratio=im_ratio))
}
mcloss(y_actual = y_dat, y_pred = y_predictions)
## Create empty data structure to store summary statistics from each image file
train_data <- data.frame(class = character(), filename = character(),lenght=numeric(),width=numeric(),density=numeric(),ratio=numeric(), stringsAsFactors = FALSE)
## Get list of classes
classes <- list.dirs(train_data_dir, full.names = FALSE)
classes <- setdiff(classes,"")
## Read all the image files and calculate training statistics
for(classID in classes){
# Get list of all the examples of this classID
train_file_list <- list.files(paste(train_data_dir,"/",classID,sep=""))
train_cnt <- length(train_file_list)
working_data <- data.frame(class = rep("a",train_cnt), filename = "a",lenght=0,width=0,density=0,ratio=0, stringsAsFactors = FALSE)
idx <- 1
#Read and process each image
for(fileID in train_file_list){
working_file <- paste(train_data_dir,"/",classID,"/",fileID,sep="")
working_image <- readJPEG(working_file)
# Calculate model statistics
working_stats <- extract_stats(working_image)
working_summary <- array(c(classID,fileID,working_stats))
working_data[idx,] <- working_summary
idx <- idx + 1
}
train_data <- rbind(train_data,working_data)
cat("Finished processing",classID, '\n')
}
y_dat <- as.factor(train_data$class)
x_dat <- train_data[,3:6]
plankton_model <- randomForest(y = y_dat, x = x_dat)
# Compare importance of the variables
importance(plankton_model)
## Check overall accuracy... 24%, not very good but not bad for a simplistic model
table(plankton_model$predicted==y_dat)
#  FALSE  TRUE
#  22959  7377 # original
## Make predictions and calculate log loss
y_predictions <- predict(plankton_model, type="prob")
ymin <- 1/1000
y_predictions[y_predictions<ymin] <- ymin
mcloss(y_actual = y_dat, y_pred = y_predictions)
require(caret)
c50Grid <- expand.grid(.trials = c(1:9, (1:10)*10),
.model = c("tree", "rules"),
.winnow = c(TRUE, FALSE))
fit2 <- train(y = y_dat, x = x_dat, method = "C5.0",
tuneGrid = c50Grid,
trControl = ctrl,
metric = "Accuracy", # not needed it is so by default
importance=TRUE, # not needed
preProc = c("center", "scale"))
c50Grid <- expand.grid(.trials = c(1:9, (1:10)*10),
.model = c("tree", "rules"),
.winnow = c(TRUE, FALSE))
fit2 <- train(y = y_dat, x = x_dat, method = "C5.0",
tuneGrid = c50Grid,
metric = "Accuracy", # not needed it is so by default
importance=TRUE, # not needed
preProc = c("center", "scale"))
warnings()
x_dat
head(x_dat)
c50Grid
y_dat
head(y_dat)
x <- train(y = y_dat, x + x_dat[,3], method="RF")
x <- train(y = y_dat, x , x_dat[,3], method="RF")
x <- train(y = y_dat, x = x_dat[,3], method="RF")
x <- train(y = y_dat, x = x_dat[,3], method="rf")
data <- data.farme(y = y_dat, x = x_dat[,3])
data <- data.frame(y = y_dat, x = x_dat[,3])
head(data)
x <- train(y ~ x, data=data), method="rf")
x <- train(y ~ x, data=data, method="rf")
rm(x)
str(train_data)
require(dplyr)
train <- smpl_frac(train_data, 0.3)
train <- sample_frac(train_data, 0.3)
str(train)
train <- sample_frac(train_data, 0.2)
str(train)
train <- sample_frac(train_data, 0.1)
str(train)
y_dat <- as.factor(train$class)
x_dat <- train[,3:6]
data <- data.frame(y = y_dat, x = x_dat)
plankton_model <- randomForest(y = y_dat, x = x_dat)
plankton_model
head(plankton_model)
importance(plankton_model)
table(plankton_model$predicted==y_dat)
y_predictions <- predict(plankton_model, type="prob")
ymin <- 1/1000
y_predictions[y_predictions<ymin] <- ymin
mcloss(y_actual = y_dat, y_pred = y_predictions)
train <- sample_frac(train_data, 0.05)
y_dat <- as.factor(train$class)
x_dat <- train[,3:6]
plankton_model <- randomForest(y = y_dat, x = x_dat)
data <- data.frame(y = y_dat, x = x_dat)
str(data)
x <- train(y = y_dat, x = x_dat, method="rf")
library(plyr)
library(doMC)
install.packages(doMC)
install.packages('doMC')
install.packages("doMC")
str(y_dat)
plankton_model <- randomForest(y = y_dat, x = x_dat, ntree=100, mtry=3)
plankton_model
table(plankton_model$predicted==y_dat)
y_predictions <- predict(plankton_model, type="prob")
ymin <- 1/1000
y_predictions[y_predictions<ymin] <- ymin
mcloss(y_actual = y_dat, y_pred = y_predictions)
rm(x)
xx <- train(y = y_dat, x = x_dat, method="rf")
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
map3 <- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup </p>")
map3$print("chart7")
